#include <iostream>
#include <vector>

#include "CGL/vector2D.h"

#include "mass.h"
#include "rope.h"
#include "spring.h"

namespace CGL {

    Rope::Rope(Vector2D start, Vector2D end, int num_nodes, float node_mass,
               float k, vector<int> pinned_nodes) {
        /* TODO (Part 1): Create a rope starting at `start`, ending at `end`, and containing `num_nodes` nodes.

         Breakdown:
           Rope(start, end, 3, ...)

          O------------O-------------O
          ^                          ^
        start                       end

           Rope
           - Masses
                - Vector2D position
                - float Mass
                - bool pinned
           - Springs
                - Mass m1, Mass m2, k

           1. Adding masses
                - Add num_nodes masses
                - Need to find equidistant positions
           2. Adding Springs
                - add springs between masses


         */

//  Calculate the offset factor
        Vector2D pos_factor = (end-start)/(num_nodes-1);

//  Added num_nodes into masses with proper position
        for(int i = 0; i < num_nodes; i ++) {
            Vector2D node_pos = start + (pos_factor*i);
            Mass *m = new Mass(node_pos, node_mass, false);
            masses.push_back(m);

            if (i > 0) {
                Mass* m0 = masses.at(i-1);
                Spring* s = new Spring(m0, m, k);
                springs.push_back(s);
            }

        }

        for (auto &i : pinned_nodes) {
            masses[i]->pinned = true;
        }

    }

/** Demonstrated in blue
 *
 *
 */
    void Rope::simulateEuler(float delta_t, Vector2D gravity) {
        for (auto &s : springs) {
            // TODO (Part 2.1): Use Hooke's law to calculate the force on a node
            Vector2D dist = s->m2->position - s->m1->position;
            float displacement = dist.norm() - s->rest_length;

            Vector2D f = s->k * dist.unit() * displacement;

            // TODO (Part 4.1): Add damping forces
            Vector2D rel_velocity = s->m2->velocity - s->m1->velocity;
            Vector2D dampening = 0.5 * rel_velocity;

            // TODO Apply forces as appropriate.
            s->m1->forces += f + dampening;
            s->m2->forces -= f + dampening;
        }

        for (auto &m : masses) {
            if (!m->pinned) {
                // TODO (Part 2.1): Add the force due to gravity, then compute the new
                // velocity and position

                // f=ma -> a = f/m
                m->velocity += (m->forces/m->mass + gravity) * delta_t;
                m->position += m->velocity * delta_t;

            }

            // TODO Reset all forces on each mass
            m->forces = Vector2D();
        }
    }

/**
 * Demonstrated in green
 * @param delta_t
 * @param gravity
 */
    void Rope::simulateVerlet(float delta_t, Vector2D gravity) {
        // TODO (Part 3.1): Clear forces
        for(Mass* m : masses) {
            m->forces = Vector2D();
        }

        for (auto &s : springs) {
            // TODO (Part 3.1): Simulate one timestep of the rope using explicit Verlet
            Vector2D dist = s->m2->position - s->m1->position;
            float displacement = dist.norm() - s->rest_length;

            Vector2D f = s->k * dist.unit() * displacement;
            s->m1->forces += f;
            s->m2->forces -= f;

        }

        for (auto &m : masses) {
            if (!m->pinned) {
                Vector2D temp_position = m->position;

                // TODO (Part 3.1): Set the new position of the rope mass
                float dampening = 1 - 0.0003;
                m->position += dampening * (temp_position-m->last_position) + ((m->forces/m->mass) + gravity) *delta_t*delta_t;
                m->last_position = temp_position;

                // TODO (Part 4.2): Add global Verlet damping


            }
        }
    }
}
